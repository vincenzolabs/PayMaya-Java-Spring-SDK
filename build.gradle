plugins {
    id 'com.github.ben-manes.versions' version '0.39.0'
    id 'org.unbroken-dome.test-sets' version '4.0.0'
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

logger.quiet "Running Java version: " + System.properties['java.vm.vendor'] + " " + System.properties['java.vm.name'] + " " + System.properties['java.version']
logger.quiet "Running Gradle version: $gradle.gradleVersion"

group 'org.vincenzolabs'
def versionNumber = System.getenv('VERSION_NUMBER') == 'unspecified' ? '1.0-SNAPSHOT' : System.getenv('VERSION_NUMBER')
project.ext.set('buildNumber', versionNumber)
version = project.ext.buildNumber
sourceCompatibility = '16'
logger.quiet "Building version: $version"

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

testSets {
    componentTest
    integrationTest
}

repositories {
    mavenCentral()
}

ext {
    springBootVersion = '2.5.0'
    lombokVersion = '1.18.20'

    reactorTestVersion = '3.4.6'
    junitVersion = '5.7.2'
    assertjVersion = '3.19.0'
}

dependencies {
    implementation "org.springframework.boot:spring-boot-starter-webflux:$springBootVersion"

    compileOnly "org.projectlombok:lombok:$lombokVersion"

    annotationProcessor "org.projectlombok:lombok:$lombokVersion"

    testImplementation "org.springframework.boot:spring-boot-starter-test:$springBootVersion"
    testImplementation "io.projectreactor:reactor-test:$reactorTestVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testImplementation "org.assertj:assertj-core:$assertjVersion"
}

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    repositories {
        maven {
            url 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
            credentials {
                username = System.getenv('OSSRH_USERNAME')
                password = System.getenv('OSSRH_PASSWORD')
            }
        }
    }
    publications {
        mavenJava(MavenPublication) {
            from components.java
            groupId 'org.vincenzolabs'
            artifactId 'paymaya-java-spring-sdk'
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'PayMaya-Java-Spring-SDK'
                packaging = 'jar'
                description = 'PayMaya-Java-Spring-SDK` is a client library written in Java 16 and Spring Boot 2.5.'
                url = 'https://github.com/vincenzolabs/PayMaya-Java-Spring-SDK'
                scm {
                    connection = 'https://github.com/vincenzolabs/PayMaya-Java-Spring-SDK.git'
                    developerConnection = 'https://github.com/vincenzolabs/PayMaya-Java-Spring-SDK.git'
                    url = 'https://github.com/vincenzolabs/PayMaya-Java-Spring-SDK'
                }
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }
                developers {
                    developer {
                        id = 'rvbabilonia'
                        name = 'Rey Vincent Babilonia'
                        email = 'rvbabilonia@gmail.com'
                    }
                }
            }
        }
    }
}

signing {
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

dependencyUpdates {
    revision = 'release'
    gradleReleaseChannel = 'current'
    resolutionStrategy {
        componentSelection { rules ->
            rules.all { ComponentSelection selection ->
                def version = selection.candidate.version.toLowerCase()
                if (version.contains('alpha') || version.contains('beta')
                        || version.contains('snapshot') || version.contains('rc')
                        || version ==~ '[0-9]+\\.[0-9]+\\.[0-9]+(?:-b|.m|-M)[0-9]+(\\.)?[0-9]*') {
                    selection.reject('Not a release')
                }
            }
        }
    }
}

tasks.withType(Test) {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

wrapper {
    gradleVersion = '7.0.2'
}
